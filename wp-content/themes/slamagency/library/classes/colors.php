<?php 

/*********************
COLOR CLASS
*********************/

class Color {

	public $name;
	public $hex;
	public $rgb;

	function __construct($name, $hex) {

		$this->name = $name;
		$this->hex = trim($hex, '#');

		$hex = $this->hex;

		if(strlen($hex) == 3) {
	      $r = hexdec(substr($hex,0,1).substr($hex,0,1));
	      $g = hexdec(substr($hex,1,1).substr($hex,1,1));
	      $b = hexdec(substr($hex,2,1).substr($hex,2,1));
	   	} else {
	      $r = hexdec(substr($hex,0,2));
	      $g = hexdec(substr($hex,2,2));
	      $b = hexdec(substr($hex,4,2));
	   	}
	   	$this->rgb = array('r' => $r, 'g' => $g, 'b' => $b);

	}

	public function rgba($trans) {
		$out = "rgba( {$this->rgb['r']}, {$this->rgb['g']}, {$this->rgb['b']}, {$trans})";
		return $out;
	}

	public function brightness() {
		return ( $this->rgb['r'] + $this->rgb['g'] + $this->rgb['b'] ) / 3;

	}

}


/*********************
DEFINE COLORS
*********************/

$colors = array(

	'green' 	=> new Color('green', 	'3EB980'),
	'white' 	=> new Color('white', 	'FFFFFF'),
	'magenta'	=> new Color('magenta',	'B13D96'),
	'mint'		=> new Color('mint', 	'A8DBD2'),
	'sky'		=> new Color('sky', 	'1496B3'),
	'blue'		=> new Color('blue', 	'1A3C6B'),
	'gray'		=> new Color('gray', 	'787878'),
	'dark'		=> new Color('dark', 	'202020'),
	'black' 	=> new Color('black', 	'000000'),
	//'orange'	=> new Color('orange', 	'eb5749'),
	//'yellow' 	=> new Color('yellow', 	'FFFFFF'),
);


function ak_get_color_options($value = 'name', $form = null){
	global $colors;

	$out = array();

	if(!$form) {

		foreach($colors as $color){
			$out[] = array(
				'label'	=> ucfirst($color->name),
				'value' => $color->$value,
			);
		}

	} else {

		foreach($colors as $color){
			$out[$color->name] = $color->$value;		
		}

	}

	return $out;
}

/*********************
DEFINE TEXTURES
*********************/

$textures = array(
	//'wood'	=> 'wood',
	//'grid'	=> 'grid',
	'paper'	=> 'paper',
);

function ak_get_texture_options() {
	global $textures;

	$out = array();
	foreach($textures as $key => $value ){
		$out[] = array(
			'label' => ucfirst($key),
			'value' => $value,		
		);
	}
	return $out;
}




/*********************
GENERATE SASS
*********************/

/**
 * Generates a SASS include file with the colors above.
 * @return [type] [description]
 */
function ak_generate_sass_colors(){

	global $colors;

	$file =  get_stylesheet_directory() . '/library/scss/_colors.scss';
	if(!file_exists($file) || $_GET['override']) {

		$home = get_home_url();
		
		$output =  "// Generated by PHP \n";
		$output .= "// \n";
		$output .= "// Don't change your colors here. Instead, delete this file  \n";
		$output .= "// and change your colors in colors.php, \n// and run {$home}?generate_sass=true. \n \n";

		$i = 0;
		foreach($colors as $name => $color){

			if($i == 0) {
				$output .= "\$primary-color: \t #{$color->hex}; \n \n";
				
			}
			$i++;

			$output .= "\${$color->name}: \t #{$color->hex}; \n";

			$text_color = '';
			if( $color->brightness() < 128) {
				$text_color = "\tcolor: #FFF; ";
				//$text_color = $color->brightness();
			}
			$styles .= "\n\n.bg-{$color->name} { \n\tbackground-color: \${$color->name}; \n{$text_color} \n}";
			
		}

		$output .= $styles;
		
		$writefile = fopen($file, 'w');
		fwrite($writefile, $output);

		

		//echo "New Colors file written."

		echo "<div data-alert class='alert-box'>
		  New Colors file written.
		  <a href='#' class='close'>&times;</a>
		</div>";

	} else {

		echo "<div data-alert class='alert-box'>
		  Colors file already exists. Delete it manually before running this command.
		  <a href='#' class='close'>&times;</a>
		</div>";

	}

}

if( $_GET['generate_sass']) {
	ak_generate_sass_colors();
}

